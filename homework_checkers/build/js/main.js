"use strict";var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var CreateCheckers=function(){function e(t,i,r,s,o,c,l,a){_classCallCheck(this,e),this.tag=t,this.parent=i,this.size=size,this.scale=r,this.fill=c,this.x=s||0,this.y=o||0,this.stroke=a||"#85653E",this.strokeWidth=l,this.elem}return _createClass(e,[{key:"create",value:function(){this.elem=document.createElementNS("http://www.w3.org/2000/svg",this.tag),this.parent.appendChild(this.elem)}},{key:"setAttributesSvg",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.parent==document.body&&(e=2*size),this.create(),this.elem.setAttribute("height",this.size*this.scale),this.elem.setAttribute("width",this.size*this.scale+e),this.elem.setAttribute("x",this.x),this.elem.setAttribute("y",this.y),this.elem}},{key:"setAttributesRect",value:function(){return this.create(),this.elem.setAttribute("height",this.size*this.scale),this.elem.setAttribute("width",this.size*this.scale),this.elem.setAttribute("fill",this.fill),this.elem.setAttribute("x",this.x),this.elem.setAttribute("y",this.y),this.elem.setAttribute("stroke",this.stroke),this.elem.setAttribute("stroke-width",this.strokeWidth),this.elem}},{key:"setAttributesCircle",value:function(e,t){return this.create(),this.elem.setAttribute("cx",this.x),this.elem.setAttribute("cy",this.y),this.elem.setAttribute("r",t),this.elem.setAttribute("fill",this.fill),this.elem.setAttribute("stroke",this.stroke),this.elem.setAttribute("stroke-width",this.strokeWidth),this.elem.classList.add(e,"slowmove"),this.elem.addEventListener("click",clickCircle,!1),this.elem}}]),e}(),size=Math.floor(.8*document.documentElement.clientHeight/8);size%2?size++:size=size;var container=new CreateCheckers("svg",document.body,9).setAttributesSvg(),outerBoard=new CreateCheckers("svg",container,9,size,0).setAttributesSvg(),strokeOuter=new CreateCheckers("rect",outerBoard,9,0,0,"#EDCFA9",5).setAttributesRect(),middleBoard=new CreateCheckers("svg",outerBoard,8.1,size/2-2,size/2-2).setAttributesSvg(),strokeMid=new CreateCheckers("rect",middleBoard,8.1,0,0,"#85653E",5).setAttributesRect(),innerBoard=new CreateCheckers("svg",middleBoard,8,3,3).setAttributesSvg();function createRect(){for(var e=0,t=0,i=0;i<8;i++){for(var r=0;r<8;r++){new CreateCheckers("rect",innerBoard,1,e,t,(i+r)%2?"#85653E":"#EDCFA9",2,"0").setAttributesRect();e+=size}e=0,t+=size}}function createCircle(){for(var e=1.5*size,t=size/2,i="#565455",r="#3C3B3B",s=0;s<6;s++){for(var o=0;o<4;o++){new CreateCheckers("circle",innerBoard,1,e,t,i,2,r).setAttributesCircle("black",size/3),new CreateCheckers("circle",innerBoard,1,e,t,i,2,r).setAttributesCircle("black",size/5);e+=2*size}2==s?(t=5.5*size,e=size/2,i="#D4E2CB",r="#F8FFEE"):s%2?(t+=size,e=1.5*size):(t+=size,e=size/2)}}function clickCircle(e){if(!this.classList.contains("lastMoved")){var t=Math.floor(this.getAttribute("cx")),i=Math.floor(this.getAttribute("cy"));searchMove(this,t,i)}}function sortCoord(e,t,i,r,s,o){var c=t[s].cx,l=t[s].cy,a=t[s+1].cx,n=t[s+1].cy,h=c-a>0?c-sizeRect:a-sizeRect,d=l-n>0?l-sizeRect:n-sizeRect,u=e[s].cx,f=e[s].cy,v=c!=a&&l!=n&&Math.abs(c-a)==2*sizeRect&&Math.abs(l-n)==2*sizeRect&&h==u&&d==f;if(v)if(o=!0,e.length>s+1&&e.length>1)sortCoord(e,t,i,r,s+1,!0);else{var C=t.slice(0,s+2),b=e.slice(0,s+1);i.push(C),r.push(b)}else if(!v){if(o){C=t.slice(0,s+1),b=e.slice(0,s);i.push(C),r.push(b)}t.splice(s,1),e.splice(s-1,1),sortCoord(e,t,i,r,s-1,!1)}}function addCoordDelete(e,t,i){var r={cx:e,cy:t};return i.push(r),i}function addCoordMove(e,t,i){var r={cx:e,cy:t};return i.push(r),i}createRect(),createCircle();var _slicedToArray=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var i=[],r=!0,s=!1,o=void 0;try{for(var c,l=e[Symbol.iterator]();!(r=(c=l.next()).done)&&(i.push(c.value),!t||i.length!==t);r=!0);}catch(e){s=!0,o=e}finally{try{!r&&l.return&&l.return()}finally{if(s)throw o}}return i}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function findCoords(e,t,i,r,s,o,c,l){s.length||addCoordMove(e,t,s);var a=setCoords(e,t,o),n=_slicedToArray(a,5),h=n[0],d=n[1],u=n[2],f=n[3],v=n[4];if(validCoord(h,d)){var C=findNextElem(h,d);if("free"==C&&(c||i==v)&&null==l)createActiveRect(h,d,i).classList.add("simpleMove"),c&&findCoords(h,d,i,r,s,o,c,l);else if("black"==C&&"white"==i||"white"==C&&"black"==i){var b=setCoords(h,d,o),m=_slicedToArray(b,2),z=m[0],A=m[1];"free"==findNextElem(z,A)&&validCoord(z,A)&&1!=searchSimilarDelete(h,d,r)&&(addCoordDelete(h,d,r),addClassDelete(h,d),findCoords(h,d,i,r,s,o,c,l=!0))}else if("free"==C&&null!=l){createActiveRect(h,d,i).classList.add("kickMove"),addCoordMove(h,d,s);var k=setCoords(h,d,o),y=_slicedToArray(k,2),g=y[0],w=y[1];("free"!=findNextElem(g,w)||c)&&validCoord(g,w)&&findCoords(h,d,i,r,s,o,c,l),findCoords(h,d,i,r,s,u,c),findCoords(h,d,i,r,s,f,c)}}}function setCoords(e,t,i){var r=void 0,s=void 0,o=void 0;return"topLeft"===i?(e=Math.floor(e-sizeRect),t=Math.floor(t-sizeRect),r="topRigth",s="lowLeft",o="white"):"topRigth"===i?(e=Math.floor(e+sizeRect),t=Math.floor(t-sizeRect),r="topLeft",s="lowRigth",o="white"):"lowLeft"===i?(e=Math.floor(e-sizeRect),t=Math.floor(t+sizeRect),r="topLeft",s="lowRigth",o="black"):"lowRigth"===i&&(e=Math.floor(e+sizeRect),t=Math.floor(t+sizeRect),r="topRigth",s="lowLeft",o="black"),[e,t,r,s,o]}function addCoordDelete(e,t,i){var r={cx:e,cy:t,flag:"delete"};return i.push(r),i}function addCoordMove(e,t,i){var r={cx:e,cy:t,flag:"move"};return i.push(r),i}function addClassDelete(e,t){for(var i=0;i<circle.length;i++)circle[i].getAttribute("cx")==e&&circle[i].getAttribute("cy")==t&&circle[i].classList.add("delete")}var validCoord=function(e,t){return 0<=e&&e<=8*sizeRect&&0<=t&&t<=8*sizeRect};
//# sourceMappingURL=data:application/json;base64,
